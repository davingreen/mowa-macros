{"version":3,"sources":["../../../src/utils/maps.js"],"names":["GoogleMaps","constructor","key","mapsClient","require","createClient","getLocation","address","Promise","resolve","reject","geocode","err","response","json","status","address_components","results","city","find","c","types","state","postal_code","county","formatted_address","long_name","position","geometry","location"],"mappings":"sEAAA,8B,+HAEe,KAAMA,WAAW,CAC9BC,YAAYC,GAAZ,CAAiB,CACf,KAAKC,UAAL,CAAkBC,QAAQ,cAAR,EAAwBC,YAAxB,CAAqC,CACrDH,IAAKA,GADgD,CAArC,CAGnB,CACDI,YAAYC,OAAZ,CAAqB,CACnB,MAAO,IAAIC,QAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CACpC,MAAO,MAAKP,UAAL,CAAgBQ,OAAhB,CACP,CACEJ,QAASA,OADX,CADO,CAIP,CAACK,GAAD,CAAMC,QAAN,GAAmB,CACjB,GAAID,GAAJ,CAAS,MAAOF,QAAOE,GAAP,CAAP,CACT,GAAIC,SAASC,IAAT,CAAcC,MAAd,EAAwB,cAA5B,CAA4C,MAAOL,QAAO,YAAP,CAAP,CAE5C,GAAIM,oBAAqBH,SAASC,IAAT,CAAcG,OAAd,CAAsB,CAAtB,EAAyBD,kBAAlD,CACA,GAAIE,MAAO,iBAAEC,IAAF,CAAOH,kBAAP,CAA2BI,GAAK,CACzC,MAAOA,GAAEC,KAAF,CAAQ,CAAR,GAAc,UACtB,CAFU,CAAX,CAGA,GAAIC,OAAQ,iBAAEH,IAAF,CAAOH,kBAAP,CAA2BI,GAAK,CAC1C,MAAOA,GAAEC,KAAF,CAAQ,CAAR,GAAc,6BACtB,CAFW,CAAZ,CAGA,GAAIE,aAAc,iBAAEJ,IAAF,CAAOH,kBAAP,CAA2BI,GAAK,CAChD,MAAOA,GAAEC,KAAF,CAAQ,CAAR,GAAc,aACtB,CAFiB,CAAlB,CAGA,GAAIG,QAAS,iBAAEL,IAAF,CAAOH,kBAAP,CAA2BI,GAAK,CAC3C,MAAOA,GAAEC,KAAF,CAAQ,CAAR,GAAc,6BACtB,CAFY,CAAb,CAGAZ,QAAQ,CACNgB,kBAAmBZ,SAASC,IAAT,CAAcG,OAAd,CAAsB,CAAtB,EAAyBQ,iBADtC,CAENP,KAAMA,KAAKQ,SAFL,CAGNJ,MAAOA,MAAMI,SAHP,CAINH,YAAaA,YAAYG,SAJnB,CAKNF,OAAQA,OAAOE,SALT,CAMNC,SAAUd,SAASC,IAAT,CAAcG,OAAd,CAAsB,CAAtB,EAAyBW,QAAzB,CAAkCC,QANtC,CAAR,CAQD,CA7BM,CA+BV,CAhCM,CAiCR,CAxC6B,C,gBAAX7B,U","file":"maps.js","sourcesContent":["import _ from 'lodash'\r\n\r\nexport default class GoogleMaps {\r\n  constructor(key) {\r\n    this.mapsClient = require('@google/maps').createClient({\r\n      key: key\r\n    })\r\n  }\r\n  getLocation(address) {\r\n    return new Promise((resolve, reject) => {\r\n        return this.mapsClient.geocode(\r\n        {\r\n          address: address\r\n        },\r\n        (err, response) => {\r\n          if (err) return reject(err)\r\n          if (response.json.status == 'ZERO_RESULTS') return reject('Not found.')\r\n            \r\n          let address_components = response.json.results[0].address_components\r\n          let city = _.find(address_components, c => {\r\n            return c.types[0] == 'locality'\r\n          })\r\n          let state = _.find(address_components, c => {\r\n            return c.types[0] == 'administrative_area_level_1'\r\n          })\r\n          let postal_code = _.find(address_components, c => {\r\n            return c.types[0] == 'postal_code'\r\n          })\r\n          let county = _.find(address_components, c => {\r\n            return c.types[0] == 'administrative_area_level_2'\r\n          })\r\n          resolve({\r\n            formatted_address: response.json.results[0].formatted_address,\r\n            city: city.long_name,\r\n            state: state.long_name,\r\n            postal_code: postal_code.long_name,\r\n            county: county.long_name,\r\n            position: response.json.results[0].geometry.location\r\n          })\r\n        }\r\n      )\r\n    })\r\n  }\r\n}\r\n"]}